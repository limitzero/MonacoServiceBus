using System;

namespace Monaco
{
	public class CombGuid
	{
		/// <summary>
		/// Extension: This will return a sequential guid that is database friendly for sorting 
		/// and reducing page fragmentation. Note: these Guids will not be 
		/// unique across system boundaries as they do not have a spatial 
		/// component attached (i.e. MAC Address or part of an existing
		/// GUID object itself)
		/// 
		/// Adapted from: 
		/// http://www.developmentalmadness.com/archive/2010/09/28/sequential-guid-algorithm-ndash-implementing-combs-in-.net.aspx
		/// 
		/// </summary>
		/// <returns></returns>
		public static Guid NewGuid()
		{
			byte[] uid = Guid.NewGuid().ToByteArray();
			byte[] binDate = BitConverter.GetBytes(DateTime.UtcNow.Ticks);
				// use UTC now to prevent conflicts w/ date time savings           

			// create comb in SQL Server sort order:           
			var comb = new byte[uid.Length];

			// the first 7 bytes are random - if two combs            
			// are generated at the same point in time            
			// they are not guaranteed to be sequential.            
			// But for every DateTime.Tick there are           
			// 72,057,594,037,927,935 unique possibilities so            
			// there shouldn't be any collisions            
			comb[3] = uid[0];
			comb[2] = uid[1];
			comb[1] = uid[2];
			comb[0] = uid[3];
			comb[5] = uid[4];
			comb[4] = uid[5];
			comb[7] = uid[6];

			// set the first 'nibble of the 7th byte to '1100' so             
			// later we can validate it was generated by us            
			comb[6] = (byte) (0xc0 | (0xf & uid[7]));

			// the last 8 bytes are sequential,            
			// these will reduce index fragmentation            
			// to a degree as long as there are not a large            
			// number of Combs generated per millisecond            
			comb[9] = binDate[0];
			comb[8] = binDate[1];
			comb[15] = binDate[2];
			comb[14] = binDate[3];
			comb[13] = binDate[4];
			comb[12] = binDate[5];
			comb[11] = binDate[6];
			comb[10] = binDate[7];

			return new Guid(comb);
		}
	}
}